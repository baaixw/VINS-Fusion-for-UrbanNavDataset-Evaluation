%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1

imu_topic: "/imu/data"
#"/imu0"
image0_topic: "/zed2/camera/left/image_raw"
# image1_topic: "/zed2/camera/right/image_raw"
output_path: "/home/wws/catkin/src/result"

cam0_calib: "cam0_pinhole.yaml"
# cam1_calib: "cam1_pinhole.yaml"
# cam1_calib: "cam1_mei.yaml"
image_width: 672
image_height: 376
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0 # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# estimate_extrinsic: 0
# If you don't know anything about the camera-IMU transformation, 
# just ignore the extrinsic parameters and set the estimate_extrinsic to 2,and rotate your device set at the beginning for a few seconds
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data:  [0.99958975976322017672, 0.017170804625958683,
              -0.022923255549840760448, -0.0851835233537896739,
               0.0231465893493554992, -0.01292276982900426,
              0.99964855695461152696, 0.1257734831824673213,
             0.016868538110887141801, -0.99976905607667321087,
           -0.013314913952324877203, 0.075888549707280005484,0.0, 0.0, 0.0, 1.0]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0.99806555168839978071, 0.0379326801997278349,
               0.049257144718268467687, 0.029131958035566882174,
             -0.0482166553469998704, -0.027873340917475634,
              0.99844791101651736227, 0.1218955155329210699,
             0.039246766492029586683, -0.99889147991108833616,
           -0.025990434412620858226, 0.051014467451145049162,0.0, 0.0, 0.0, 1.0]
#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 30
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time 0.04
max_num_iterations: 8   # max solver itrations, to guarantee real time 8 
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1         # accelerometer measurement noise standard deviation. #0.2   0.04 0.1 
gyr_n:   0.01       # gyroscope measurement noise standard deviation.     #0.05  0.004 0.01
acc_w:  0.001      # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001  # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.8         # gravity magnitude

#unsynchronization parameters
estimate_td: 0                 # online estimate time offset between camera and imu
# estimate_td: 0  
td: 0                 # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/wws/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 


# rosrun camera_calibration cameracalibrator.py --size 4x3 --square 0.07 image:=/camera/image_raw camera:=/camera